services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: bookmeashow-postgres
    environment:
      POSTGRES_DB: bookmeashow
      POSTGRES_USER: bookmeashow_user
      POSTGRES_PASSWORD: bookmeashow_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/main/resources/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - bookmeashow-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bookmeashow_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB
  mongodb:
    image: mongo:7
    container_name: bookmeashow-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: bookmeashow_reviews
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - bookmeashow-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: bookmeashow-redis
    ports:
      - "6379:6379"
    command: redis-server --requirepass redis123
    volumes:
      - redis_data:/data
    networks:
      - bookmeashow-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: bookmeashow-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - bookmeashow-network

  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: bookmeashow-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - bookmeashow-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: bookmeashow-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - bookmeashow-network

  # Backend Service (Development with Hot Reload)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: bookmeashow-backend
    ports:
      - "8080:8080"
      - "5005:5005" # Debug port
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/bookmeashow
      SPRING_DATASOURCE_USERNAME: bookmeashow_user
      SPRING_DATASOURCE_PASSWORD: bookmeashow_pass
      SPRING_DATA_MONGODB_URI: mongodb://admin:admin123@mongodb:27017/bookmeashow_reviews?authSource=admin
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: redis123
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_ELASTICSEARCH_URIS: http://elasticsearch:9200
      SPRING_DEVTOOLS_RESTART_ENABLED: "true"
    volumes:
      - ./backend/src:/app/src
      - ./backend/pom.xml:/app/pom.xml
      - backend_m2:/root/.m2
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_started
      kafka:
        condition: service_started
    networks:
      - bookmeashow-network
    restart: unless-stopped

    # Frontend Service (Development with Hot Reload)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: bookmeashow-frontend
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost/api
      NODE_ENV: development
      WATCHPACK_POLLING: "true"
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/package.json:/app/package.json
      - ./frontend/next.config.js:/app/next.config.js
      - ./frontend/tailwind.config.js:/app/tailwind.config.js
      - ./frontend/tsconfig.json:/app/tsconfig.json
      - /app/node_modules
      - /app/.next
    networks:
      - bookmeashow-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: bookmeashow-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - backend
    networks:
      - bookmeashow-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: bookmeashow-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - bookmeashow-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: bookmeashow-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - bookmeashow-network

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:
  backend_m2: # Maven cache for faster rebuilds

networks:
  bookmeashow-network:
    driver: bridge
